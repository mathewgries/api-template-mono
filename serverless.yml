# Name your service
# This should follow suit of your application name
# replace the 'smart-budget' with your app name
service: #smart-budget-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  # Replace 'accounts' with the name of your dynamo db table
  tableName: # ${self:custom.stage}-accounts

# Verify the runtime is the latest version.
# Check periodically for updates if necessary
provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      # List your tables below for user access
      Resource:
        #- "Fn::GetAtt": [ AccountsTable, Arn ]

# List your endpoint functions.
functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /accounts
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: accounts
          method: post
          cors: true
          authorizer: aws_iam

# Import any configurations set up in a separate yml file
# for our application
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Database
  - ${file(resources/dynamodb-table.yml)}
  # s3 Bucket
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}